apply plugin: 'java'
apply plugin: 'io.qameta.allure'

version(property('version'))
group(property('group'))

repositories {
    mavenCentral()
    maven{ url 'https://maven.aliyun.com/repository/jcenter'}
    maven{ url 'https://maven.aliyun.com/repository/gradle-plugin'}
    maven{ url 'https://maven.aliyun.com/repository/public'}
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.qameta.allure:allure-gradle:2.8.1"
    }
}
// 依赖框架
dependencies {
    ext {
        set('snakeyamlVersion', '1.21')
    }
    implementation("org.yaml:snakeyaml:$snakeyamlVersion")
    implementation("org.testng:testng:7.4.0")
    implementation("com.codeborne:selenide:6.3.3")
    implementation("io.qameta.allure:allure-testng:2.17.3")
    implementation("org.assertj:assertj-core:3.21.0")
    implementation("cn.hutool:hutool-all:5.7.16")
    implementation("org.projectlombok:lombok:1.18.22")
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha14'
    implementation 'io.rest-assured:rest-assured:4.5.1'
    implementation 'ch.qos.logback:logback-core:1.3.0-alpha14'
    annotationProcessor("org.projectlombok:lombok:1.18.22")
    testAnnotationProcessor("org.projectlombok:lombok:1.18.22")
}

// 获取环境变量， 如果是 qa的测试报告 就放在 qa 下， 如果是 uat 就放在 uat 下面。 如果没有设置， 就默认放在 reports 下面
// 复制是将历史数据复制到相应的文件下，方便下次生成， 因为报告是两个环境的， 也需要设置相应的环境变量
if(System.getProperty("env")) {
    allure {
        autoconfigure = true
        version = '2.17.0'
        resultsDir = file("../../reports/${System.getProperty("env")}/allure-results")
    }
    task copyToHistory(type: Copy) {
        from 'build/reports/allure-report/history'
        into "reports/${System.getProperty("env")}/allure-results/history"
    }
}else{
    allure {
        autoconfigure = true
        version = '2.17.0'
        resultsDir = file("../../reports/allure-results")
    }
    task copyToHistory(type: Copy) {
        from 'build/reports/allure-report/history'
        into "reports/allure-results/history"
    }
}

tasks.register('on-test', Test) {
    systemProperties = System.getProperties() as Map<String, ?>
    useTestNG(){
        suites("src/test/resources/testng.xml")
    }
}
tasks.register('on-retry', Test) {
    systemProperties = System.getProperties() as Map<String, ?>
    useTestNG(){
        suites("src/test/resources/testng-failed.xml")
    }
}


tasks.register('on-prem', Test) {
    useTestNG(){
        if (project.hasProperty('test-name')) {
            include '**/' + project.property('test-name') + '.class'
            setSuiteName('RETRY TEST CASES')
            setTestName('RETRY TEST CASE')
        }
        systemProperties = System.getProperties() as Map<String, ?>
    }
}